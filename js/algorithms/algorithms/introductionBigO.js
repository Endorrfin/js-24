
/*

Big O - показывает верхнюю границу зависимости между входными параметрами функции и количеством операций. которые выполнит процессор.
нотация Big O - это относительное представление сложности алгоритма и показывает как будет меняться производительность алгоритма в зависимости от роста входящих данных.
Если будет увеличиваться количество входящих данных, то могут расти 2 параметры:
  1. время, за которое будет отрабатывать наш алгоритм.
  2. количество памяти, используемо данным алгоритмом для обработки всего входящего объема данных.
Скорость роста данных 2-х параметров показывает Big O.
Оценка сложности:
  1.1 O(1) - С ростом входящих данных время для выполнения задачи остается неизменным.
  1.2 O(n) - С ростом входящих данных пропорционально растет и время для выполнения задачи.
  1.3 O(log n) - На каждой итерации объем входных данных уменьшаеться наполовину (отсекаем 50% данных на каждой итерации, пример бинарный поиск).
  1.4 O(n log n) - Это сложность алгоритма merge sort.
  1.5 O(n^2) - Это квадратичная сложность n².
  1.6 O(n^3) - Это сложность степени 3.
  1.7 O(2^n) - Экспоненциальная сложность.
  1.8 O(n!) - Факториальная сложность.


* f(n) could be linear (f(n) = n)
* f(n) could be quadratic (f(n) = n^2)
* f(n) could be constant (f(n) = 1)
* f(n) could be something entirely different!
*
* */


// ------------ Case 1.1 - O(1) ------------
function getLastElement(arr) {
  return arr[arr.length-1];
}


// ------------ Case 1.2 - O(n) ------------
function getSumOfArray(arr) {
  let sum = 0;

  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }

  return sum;
}


// ------------ Case 1.5 - O(n^2) ------------
function getMultiplyList(n) {
  for (let i = 1; i <= n; i++) {
    for (let k = 1; k <= n; k++) {
      // return (`${i} * ${k} = ${i * k}`);
      console.log((`${i} * ${k} = ${i * k}`));
    }
  }
}

// getMultiplyList(10);



// -------------- Example 1 - O(n) operation inside of an O(n) operation -> O(n^2) --------------

function countUpAndDown (n) {
  console.log("Going Up!");
  for(let i = 0; i < n; i++) {
    console.log(i);
  }

  console.log('At the top!\nGoing down...');
  for(let k = n - 1; k >= 0; k--) {
    console.log(k);
  }
  console.log("Back down. Bye!");
}

// countUpAndDown(10);
