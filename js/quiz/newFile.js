/**
|--------------------------------------------------
  === <<<--- <geekbrains/> Тест по JavaScript. Начальный уровень --->>>  ===

|--------------------------------------------------
*/
// === 1. Как называется конструкция, приведенная в коде ниже в правой части присвоения?
// window.onload = function() { 
// alert("Страница загружена"); 
// };
// Анонимная функция  
// Замыкание
// Функциональное выражение ---
// Определение функции +
// === 2. Для чего используется инструкция break в блоке switch?
// для выхода из блока switch +++
// === 3. Выберите допустимые имена функций:
// add10 ---
// get-Data
// $
// -
// мой вариант add10 | $ | - 
// === 4. Для чего используется функция prompt?
// Чтобы показать пользователю информационное сообщение с произвольным заголовком
// Функция отображает диалоговое окно для ввода пользователем значения из заданного списка. ---
// Фукнция отображает диалоговое окно для ввода пользователем произвольного значения +++
// === 5. Как можно динамически создать функцию с кодом из произвольной строки?
// C помощью вызова фукнции eval(<строка>) ++
// C помощью вызова new Function
// С помощью специального объявления функции: function func () [<строка>] ---
// C помощью вызова stringToFunction.
// === 6. Значениями каких типов может быть результат сравнения?
// null
// number
// undefined
// boolean +++
// === 7. Как объявить массив?
// Нет правильных вариантов
// var array = Array();
// var array = new Array(); +++
// var array = []; ---    & +++
// === 9. Чему будет равна переменная b после выполнения следующего кода?
// var a = "1", b = 4;
// switch(a) {
//   case 1:
//     b = 1;
//   case 2:
//     b = 2;
//     break;
//   default:
//     b = 3;
// }
// 4
// 1
// 3 +++
// 2
// console.log(b);
// === 10. За что отвечает первый аргумент в методе call?
// avg.call(parameter1, parameter2);
// Объект, который будет применен в качестве this +++
// === 11. Как объявить несколько переменных одной командой?
// var a, b;+++
// === 12. С каким количеством параметров можно вызывать фукнцию?
// Функцию можно вызывать с любым количеством параметров, не зависимо от того с каким количеством параметров она объявлена. +++
// Количество параметров должно быть не больше объявленных в фукнции, иначе возникнет ошибка.
// Количество параметров должно быть не меньше объявленных в фукнции, иначе возникнет ошибка.
// Количество параметров должно быть павно количеству объявленных в функции, иначе возникнет ошибка.
// === 13. Что будет, если внутри функции объявлена переменная с тем же именем, что и внешняя переменная?
// Будет создана новая локальная переменная (с тем же именем), фукнция будет работать с ней. Внешняя переменная не перезапишеться. +++
// === 14. Обязательно ли выделять блок кода условного оператора фигурными скобками?
// Не обязательно, если команда только одна +++
// === 15. Для чего используется оператор «запятая»?
// Этот операто вычисляет полсдеовательно несколько выражений, при этом не возвращает никаково значения.
// Для последовательного вычисления нескольких выражений и возвращения результата вычисления последнего. +++
// Это не оператор, запятая предназначена для разделения нескольких переменных в одном объявлении var. ---
// === 16. Выберите тип данных, которых нет в JavaScript?
// float +++
// string
// undefined
// null
// char +++
// === 17. Что можно задать вторым параметром функции prompt?
// Значение по умолчанию +++
// === 18. С помощью каких тегов можно добавить скрипт на JavaScript в HTML-документ?
// <script> +++
// === 19. Выберите допустимые имена переменных среди перечисленных
// Ни один из вариантов не является допустимым
// 1user
// _Var
// $$
// var-1
// 1user, _Var, $$, var-1 ---
// /\ my note: не может начинаться с цифры   &  дефис '-' не разрешён в имени
// === 20. В каком из вариантов приведен правильный синтаксис тернарного оператора («вопросительный знак»)?
// <условное выражение> : < выражение1 > ? < выражение2 >
// <условное выражение> ? < выражение1 > , < выражение2 >
// Ни один из вариантов не является правильным. ++
// if <условное выражение> ? < выражение1 > : < выражение2 > } ---
// === 21. Что произойдет, если в теге <script> задана ссылка на внешний файл скрипта (с помощью атрибута src) и при этом внутри тега есть код JavaScript?
// Будет загружен и выполнен скрипт, код внутри тега будет проигнорирован. ++
// Сначала выполнится код внутри тега, затем будет загружен и выполнен внешний скрипт. ---
// Будет загружен и выполнен внешний скрипт, затем выполнится код внутри тега.
// Браузер проигнорирует тег <script>, т.к. не допускается одновременно задавать и ссылку на внешний файл и код внутри тега.
// === 22. Можно ли вызвать функцию из себя самой?
// Нет, из фукнции можно вызвать только другие функции.
// Да, из объявленной фукнции или именованного функционального выражения
// Да, только из анонимной функции. ---
// Да, только из объявленной функции. ++
// === 23. Выберите допустимые в JavaScript операторы сравнения среди перечисленных:
// !== +++
// =
// <>
// >= +++
// === 24. Какой фукнцией можно вывести окно с сообщением пользователю?
// alert("Hello") +++
// === 25. Как работает тернарный оператор, если одно из выражений заменить на управляющую конструкцию (например, continue или return)?
// Будет ошибка, поскольку тернарный оператор сам по себе возвращает значение. +++
// === 26. Для чего используется инструкция break в блоке switch?
// Для вызова из блока switch +++
// === 27. Как отсортировать массив var arr=[3, 1, 2]?
// sortarr(arr);
// arr.sort(); +++
// sort(arr);
// нет правильных вариантов
// === 28. Как создать многомерный массив?
// var matrix = [ [1,2,3] [4,5,6] [7,8,9] ] +++
// === 29. Как узнать длинну массива?
// arr.length +++
// === 30. Как опеределяется истинность/ложность условного выражения?
// Выражение вычисляется, и полученное значение приводиться к логическому типу +++
// === 31 В каких случаях нужно указывать в теге <script> атрибут «type="text/javascript"»?
// Этот атрибут необходим в документах стандарта HTML 4, в документе HTML5 он не требуется +
// Его нужно указывать для встроенных скриптов, иначе браузер не выполнит скрипт. ---
// Его нужно укзаывать для внешних скриптов, иначе браузер не выполнить скрипт
// Этот атрибут нужен в документах HTML5? где должно быть явно указано на каком языке написан скрипт
// === 32 Какое выражение выведет отладочные данные на консоль браузера?
// console.log(data)
// Правильных вариантов нет +
// console(data)
// window.log(data) ---
// === 33 В каком цикле можно дополнительно задать инструкции, выполняемые перед началом цикла и после каждой итерации?
// do..while ---
// for +
// while
// === 34 Чему будет равна переменная a после выполнения следующего кода:
// var func = function () {
//   return 1 + 2;
// }
// var a = func
// Будет ошибка, т.к. при вызове фукнции необходимы скобки.
// Ссылка на функцию func
// "function" +
// 3
// console.log(a); // ƒ () { return 1 + 2; }
// === 35 Что происходит, если логический оператор применяется к значению другого типа (не boolean)?
// Для вычисления значения будет преобразовано к логическому типу.
// === 36 Для чего нужен оператор %
// Этот оператор возвращает остаток от деления +++
// === 37 Какой тип данных используется для хранения отдельных символов?
// Тот же, что и для строк - string +++
// === 38 Выберите корректные варианты записи бесконечных циклов:
// for () {}
// while (1) {} +
// for (;;) {}
// do {} while (true)
// Wrong while (1) {} & do {} while (true)
// === 39 Выберите наиболее точное определение JavaScript
// Язык программирования универсального назначения, используемый также в качестве основного скриптового языка в барузерах +
// Язык программирования универсального назначения, также является единственным скриптовым языком, который поддерживают браузеры. ---
// Язык программирования для веб-разработки, используется исключительно в браузерах
// === 40 Для чего используется конструкция switch?
// Для сравнения произвольного выражения с различными значениями. +++
// === 41 Выберите корректный вариант записи условного оператора
// if (<условное выражение>) {<команды>} +++
// === 42 Можно ли из фукнции получить доступ к внешним переменным (объявленным за пределами функции)?
// Да, как на чтение, так и на запись +++
// === 43 Будет ли выполнен код, если он находиться после непрерывного бесконечного цикла?
// Нет +++
// === 44 Какими способами можно записать строку в выражении JavaScript?
// С помощью одинарных или двойных, оба способа равноправны.
// === 45 В каких из этих случаев результат сравнения строк - истина?
// Результаты всех сравнений ложны. ---
console.log("WWW" == "www"); // false

console.log("F" > "ф"); // false

console.log("Я" > "Яа"); // false

console.log("ла" < "ё"); // true +++

