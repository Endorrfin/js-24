
// ============ <geekbrains/> Тест по JavaScript. Начальный уровень ============

// === 1. Как называется конструкция, приведенная в коде ниже в правой части присвоения?
// window.onload = function() { 
// alert("Страница загружена"); 
// };

// Анонимная функция
// Замыкание
// Функциональное выражение
// Определение функции +



// === 2. Для чего используется инструкция break в блоке switch?
// для выхода из блока switch +++



// === 3. Выберите допустимые имена функций:
// add10 ---
// get-Data
// $
// -

// мой вариант add10 | $ | - 


// === 4. Для чего используется функция prompt?
// Чтобы показать пользователю информационное сообщение с произвольным заголовком
// Функция отображает диалоговое окно для ввода пользователем значения из заданного списка. ---
// Фукнция отображает диалоговое окно для ввода пользователем произвольного значения +++



// === 5. Как можно динамически создать функцию с кодом из произвольной строки?
// C помощью вызова фукнции eval(<строка>) ++
// C помощью вызова new Function
// С помощью специального объявления функции: function func () [<строка>] ---
// C помощью вызова stringToFunction.



// === 6. Значениями каких типов может быть результат сравнения?
// null
// number
// undefined
// boolean +++



// === 7. Как объявить массив?
// Нет правильных вариантов
// var array = Array();
// var array = new Array(); +++
// var array = []; ---    & +++



// === 9. Чему будет равна переменная b после выполнения следующего кода?
// var a = "1", b = 4;
// switch(a) {
//   case 1:
//     b = 1;
//   case 2:
//     b = 2;
//     break;
//   default:
//     b = 3;
// }

// 4
// 1
// 3 +++
// 2

// console.log(b);



// === 10. За что отвечает первый аргумент в методе call?
// avg.call(parameter1, parameter2);
// Объект, который будет применен в качестве this +++



// === 11. Как объявить несколько переменных одной командой?
// var a, b;+++



// === 12. С каким количеством параметров можно вызывать фукнцию?
// Функцию можно вызывать с любым количеством параметров, не зависимо от того с каким количеством параметров она объявлена. +++
// Количество параметров должно быть не больше объявленных в фукнции, иначе возникнет ошибка.
// Количество параметров должно быть не меньше объявленных в фукнции, иначе возникнет ошибка.
// Количество параметров должно быть павно количеству объявленных в функции, иначе возникнет ошибка.



// === 13. Что будет, если внутри функции объявлена переменная с тем же именем, что и внешняя переменная?
// Будет создана новая локальная переменная (с тем же именем), фукнция будет работать с ней. Внешняя переменная не перезапишеться. +++




// === 14. Обязательно ли выделять блок кода условного оператора фигурными скобками?
// Не обязательно, если команда только одна +++



// === 15. Для чего используется оператор «запятая»?
// Этот операто вычисляет полсдеовательно несколько выражений, при этом не возвращает никаково значения.
// Для последовательного вычисления нескольких выражений и возвращения результата вычисления последнего. +++
// Это не оператор, запятая предназначена для разделения нескольких переменных в одном объявлении var. ---


// === 16. Выберите тип данных, которых нет в JavaScript?
// float +++
// string
// undefined
// null
// char +++



// === 17. Что можно задать вторым параметром функции prompt?
// Значение по умолчанию +++



// === 18. С помощью каких тегов можно добавить скрипт на JavaScript в HTML-документ?
// <script> +++



// === 19. Выберите допустимые имена переменных среди перечисленных
// Ни один из вариантов не является допустимым
// 1user
// _Var +
// $$ +
// var-1 +

// 1user, _Var, $$, var-1 ---

// /\ my note: 1. Имя переменной должно содержать только буквы, цифры или символы $ и _. 
// /\ my note: 2. Первый символ не должен быть цифрой.
// WRONG  _Var    &     $$



// === 20. В каком из вариантов приведен правильный синтаксис тернарного оператора («вопросительный знак»)?
// <условное выражение> : < выражение1 > ? < выражение2 >
// <условное выражение> ? < выражение1 > , < выражение2 >
// Ни один из вариантов не является правильным. ++
// if <условное выражение> ? < выражение1 > : < выражение2 > } ---


// === 21. Что произойдет, если в теге <script> задана ссылка на внешний файл скрипта (с помощью атрибута src) и при этом внутри тега есть код JavaScript?
// Будет загружен и выполнен скрипт, код внутри тега будет проигнорирован. ++
// Сначала выполнится код внутри тега, затем будет загружен и выполнен внешний скрипт. ---
// Будет загружен и выполнен внешний скрипт, затем выполнится код внутри тега.
// Браузер проигнорирует тег <script>, т.к. не допускается одновременно задавать и ссылку на внешний файл и код внутри тега.



// === 22. Можно ли вызвать функцию из себя самой?
// Нет, из фукнции можно вызвать только другие функции.
// Да, из объявленной фукнции или именованного функционального выражения
// Да, только из анонимной функции. ---
// Да, только из объявленной функции. ++



// === 23. Выберите допустимые в JavaScript операторы сравнения среди перечисленных:
// !== +++
// =
// <>
// >= +++



// === 24. Какой фукнцией можно вывести окно с сообщением пользователю?
// alert("Hello") +++



// === 25. Как работает тернарный оператор, если одно из выражений заменить на управляющую конструкцию (например, continue или return)?
// Будет ошибка, поскольку тернарный оператор сам по себе возвращает значение. +++



// === 26. Для чего используется инструкция break в блоке switch?
// Для вызова из блока switch +++



// === 27. Как отсортировать массив var arr=[3, 1, 2]?
// sortarr(arr);
// arr.sort(); +++
// sort(arr);
// нет правильных вариантов



// === 28. Как создать многомерный массив?
// var matrix = [ [1,2,3] [4,5,6] [7,8,9] ] +++



// === 29. Как узнать длинну массива?
// arr.length +++



// === 30. Как опеределяется истинность/ложность условного выражения?
// Выражение вычисляется, и полученное значение приводиться к логическому типу +++



// === 31 В каких случаях нужно указывать в теге <script> атрибут «type="text/javascript"»?

  // Этот атрибут необходим в документах стандарта HTML 4, в документе HTML5 он не требуется +
  // Его нужно указывать для встроенных скриптов, иначе браузер не выполнит скрипт. ---
  // Его нужно укзаывать для внешних скриптов, иначе браузер не выполнить скрипт
  // Этот атрибут нужен в документах HTML5? где должно быть явно указано на каком языке написан скрипт



// === 32 Какое выражение выведет отладочные данные на консоль браузера?

  // console.log(data)
  // Правильных вариантов нет +
  // console(data)
  // window.log(data) ---



// === 33 В каком цикле можно дополнительно задать инструкции, выполняемые перед началом цикла и после каждой итерации?

  // do..while ---
  // for +
  // while



// === 34 Чему будет равна переменная a после выполнения следующего кода:
// var func = function () {
//   return 1 + 2;
// }
// var a = func

  // Будет ошибка, т.к. при вызове фукнции необходимы скобки.
  // Ссылка на функцию func
  // "function" +
  // 3
// console.log(a); // ƒ () { return 1 + 2; }



// === 35 Что происходит, если логический оператор применяется к значению другого типа (не boolean)?
  // Для вычисления значения будет преобразовано к логическому типу.



// === 36 Для чего нужен оператор %
  // Этот оператор возвращает остаток от деления +++



// === 37 Какой тип данных используется для хранения отдельных символов?
  // Тот же, что и для строк - string +++



// === 38 Выберите корректные варианты записи бесконечных циклов:
// for () {}
// while (1) {} +
// for (;;) {}
// do {} while (true)

// Wrong while (1) {}     &     do {} while (true)
// Wrong for () {}    &   while (1) {}



// === 39 Выберите наиболее точное определение JavaScript
  // Язык программирования универсального назначения, используемый также в качестве основного скриптового языка в барузерах +
  // Язык программирования универсального назначения, также является единственным скриптовым языком, который поддерживают браузеры. ---
  // Язык программирования для веб-разработки, используется исключительно в браузерах



// === 40 Для чего используется конструкция switch?
  // Для сравнения произвольного выражения с различными значениями. +++



// === 41 Выберите корректный вариант записи условного оператора
  // if (<условное выражение>) {<команды>} +++



// === 42 Можно ли из фукнции получить доступ к внешним переменным (объявленным за пределами функции)?
  // Да, как на чтение, так и на запись +++



// === 43 Будет ли выполнен код, если он находиться после непрерывного бесконечного цикла?
  // Нет +++



// === 44 Какими способами можно записать строку в выражении JavaScript? 
  // С помощью одинарных или двойных, оба способа равноправны.



// === 45 В каких из этих случаев результат сравнения строк - истина?
  // Результаты всех сравнений ложны. ---
  // console.log("WWW" == "www"); // false
  // console.log("F" > "ф"); // false
  // console.log("Я" > "Яа"); // false
  // console.log("ла" < "ё"); // true +++


// === 46 Чему будет равна переменная a после выполнения следующего кода:
// var a = 1;
// console.log((a > 0) ? (a += 1, a++) : a);

  // Будет ошибка, т.к. использованы недопустимые в данном случае операторы. ---
  // 2 ++



// === 47 Как проверить, входит ли подстрока var b = "hell"; в строку var a = "hello!"; ?
// var b = "hell";
// a = "hello!";

// a.findstr(b);
// findsubstr(b, a);
// a.indexOf(b); ++

  // Нет правильных вариантов;



// === 48. Чему равны переменные a и b после выполнения кода: a = 1; b = -a--;
  // 1, 0 ---



// === 49. Что выведет в консоль приведенный ниже код?

  // Привет, undefined ---



// === 50. Для чего используется функция prompt?
  // Функция отображает диалоговое окно для ввода пользователем значения из заданного списка. ---



// === 51. Как объединить массивы
// var num1 = [1, 2, 3];
// var num2 = [4, 5, 6];
// var num3 = [7, 8, 9];
// в один массив, соединяя элементы массивов, т.е получить массив вида [1, 2, 3, 4, 5, 6, 7, 8, 9] ?

  // var nums = concat(num1, num2, num3) ---









// ============ <geekbrains/> Тест по JavaScript. Средний уровень ============

// === 1. В каком случае можно использовать then после catch при работе с промисами?
// Если catch возвращает промис +++
// Если catch выдает внутреннюю ошибку
// Если в цепочке более трех промисов +
// Ни при каком, catch пишется один на всю цепочку промисов в конце ---




// === 2. Что выведется в консоль?
// const promise = new Promise((resolve, reject) => setTimeout(() =>{
//   console.log(1);
//   reject("2");
//   }, 1000)
//   );
//   promise.then((result) => console.log(2)).catch((result) => console.log(3))

// 1 2 3
// 1 2 ---
// 1
// 1 3 +++

// console.log(promise);



// === 3. Каким образом можно отменить выполнение фукнции setTimout(...)?
// clearTimeout(timeoutId) +++



// === 4. JavaScript может использоваться для:
// Управления страницами в браузере, серверного, мобильного программирования и создания приложений в любой операционной системе. +++



// === 5. Что вернет следующий код: 
// ' привет, GeekBrains ' .slice(-10)

// ekbrains
// привет, Ge ---
// Uncought SyntaxError
// GeekBrains +++

// const str = 'привет, GeekBrains';
// const strRes = str.slice(-10);
// console.log(strRes); // GeekBrains



// === 6. Какая функция должна оборачивать тесты в тест-фреймворке Jasmine?
// it +++
// do ---
// as
// is



// === 7. Часто встречается такая конструкция:
// promise.then(code 1).then(code 2).catch(code 3)
// Какие могут быть последовательности исполнения кода?

// code 1, затем code 2 [---] *---*
// code 1, затем code 3 [---] ((---))
// code 2, затем code 3 [---] ((---))
// code 1, затем code 2, затем code 3 *---*


// All Answers ---
// code 1, затем code 2   &   code 1, затем code 2, затем code 3 ---




// === 8. Какое значение будет в переменной person после выполнения следующего кода:
// const person = {name: 'Иван', age: 23}; 
// person = {...person, age: 25, job: 'web developer'}
// console.log(person);

// {name: 'Иван',age:25,job:'web developer'} ---
// {person: {name: 'Иван', age:23}, age:25, job: 'web developre'}
// {name: 'Иван', age: 25}
// {name: 'Иван', age:23}, на второй строке выйдет ошибка +++



// === 9. Что выведется в консоль?
// console.log(/\s+/.exec("9,8,7,6,5,4,3,2,1 Старт!").index);
// 17 ++
// 18 ---
// 0 ---
// 1 ---



// === 10.
// const a = /abc/;
// const b = /def/;

// a - b ? 
// NaN

// const c = a - b;
// console.log(c); // NaN



// === 11. Какое высказывание справедливо для классов при наследовании?

// Чтобы при наследовании использовать методы класса-родителя, надо прописать super() в конструкторе класса ---
// Наследование в JavaScript не предусмотрено
// Чтобы использовать методы класса-родителя, надо их переопределить
// Новый класс может использовать все методы класса-родителя ++



// === 12. Как прописать в классе People подсчет количества человек?
// Option I ---
// Прописывается свойство static count (имя переменной может быть любое), которое увеличивается на 1 при создании нового объекта, обращаться надо так:
// const man = new People()
// console.log(People.count);

// Option II --- ---
// Прописывается свойство static count (имя переменной может быть любое), которое увеличивается на 1 при создании нового объекта, обращаться надо так:
// const man = new People()
// console.log(man.count);

// Option III ---
// В самом классе никак, надо создать отдельную переменную и там хранить количество


// Option IV +
  //Можно получить так: People.length



// === 13. JSON.parse(JSON.stringify(object)) вернет
  // Представление объекта в виде строки ---
  // Новый объект, полностью скопированный с переданного (включая копии дочерних элементов) +++



// === 14. Какое свойство отвечает за нажатие на кнопку?
// onpress
// click
// onpush
// onclick +++



// === 15. Что выведется в консоль?
// const object1 = {
//   name: "Ivan",
//   age: 25
// }

// const object2 = object1
// object2.age += 5;
// console.log(object1.age); // 30

// 30 +++
// 5
// Uncaught TypeError: Assignment to constant variable
// 25


// === 16. Какое значение будет в переменной result?
// const result = /\d*/.exec("У Вани было 5 яблок, а у Пети 4.").index
// 12 ---
// 5 ---
// 0 +++
// 30

// console.log(result);



// === 17. Была задача проверить правильное значение переменной a, которая может быть «Мистер», «Миссис» или «Мисс». Разработчик реализовал проверку следующим образом:
// /Мистер|Миссис|Мисс/.test(a);
// Но код отрабатывает не совсем корректно. Как сделать код работоспособным?

// Добавь спецсимволы +++
// /∧Мистер$|∧Миссис|∧Мисс$/.test(a);

// Переделать значение переменной в транслит и проверять
// /Mister|Missis|Miss/.test(a);

// Добавить кванторы ---
// /(Мистер)+|(Миссис)+|(Мисс)+/.test(a);

// Добавить спецсимволы ---
// /\bМистер\b|\bМиссис\b|\bМисс\b/.test(a);




// === 18. Какое регулярное выражение не распознает почту myname@domain.ru
  // /my+name@domain.ru/
  // MyNaMe@d0mAiN\.rU/i
  // /\w+\W+domin\w+\W+\w+/ +++
  // /\w*@domain\w*\W*ru/



// === 19. Порядок переменных для коллбек-функции в методах массива (map, filter)
  // Элемент, индекс, массив +++



// === 19. Как получить последний день месяца переданной даты?
  // new Date(date.getFullYear(),date.getMonth(),0) ---
  // new Date(date.getFullYear(),date.getMonth()+1,-1)
  // new Date(date.getFullYear(),date.getMonth()+1,0)
  // new Date(date.getFullYear(),date.getMonth(),31) ---



// === 20. Для чего нужен метод reduce?
  // В методе задается функция-аккумулятор и он возвращает значение аккумулятора данной функции при обходе всех элементов +++



// === 21. Задача: проверить, чтоб пароль пользователя соответствовал политике безопасности (длина не менее 8 символов, должны быть буквы латинского алфавита, цифры и хотя бы один из символов — @#$!^). Лучшее решение:

  // Проверить длинну пароля функцией длины строки, остальное - при помощи регулярного выражения ---
  // Решения равнозначны по скорости работы, регулярные выражения запысываются короче, но сложнее для понимания
  // Проверить длинну пароля функцией длинны строки, остальные проверить условиями вхождения символов в пароль
  // Проверить пароль при помощи регулярного выражения +++



// === 22. Есть массив
// const array=[1,2,3,4,5,6,7,8,9,0]
// Что произойдет с ним в результате выполнения следующего кода?
// array.forEach((el,ind) => {array[ind] = el+1})
// console.log(array.forEach((el,ind) => {array[ind] = el+1}))// (10) [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]

// Элементы массива увеличатся на единицу +++



// === 23. Что выведет в консоль следующий код:
  // const a = () => 2;
  // const b = () => 4;
  // console.log(a+b);

  // () => 2() => 4 +++



// === 24. Задан массив
// const a = [1,2,3,4,5,6,7,8];
// Что вернет код a.slice(-6)?
// console.log(a.slice(-6));
  
  // [3,4,5,6,7,8] +++
  // [1,2,3,4,5,6] ---



// === 25. В результате выполнения кода
// const cities = ['Moscow', 'Paris', 'Berlin', 'London'];
// const city = [...cities];
// получится 
// console.log(city);

  // Новый массив city со значениями ["Moscow", "Paris", "Berlin", "London"] +++



// === 26. 
// const a = null;
// Какое сравнение даст истину?
  // a == null // +++
  // a === undefined
  // a == undefined +++
  // a === nul



// === 27. Чему ранов выражение?
// console.log(5 + +"5"); // 10



// === 28.
// Есть 2 переменные:
// const array = [1,2,3,4,5]
// const object = {name: "Ivan", age: 23}

// Какой результат будет у выражения […array,object]? 
// console.log([…array,object]); // Uncaught SyntaxError: Invalid or unexpected token

  // Uncought TypeError: object is not iterable + ---
  // [[1,2,3,4,5],{name: "Ivan", age: 23}] ---



// === 29. Как будет выглядеть стрелочный аналог функции:
// function() {
//   return arguments[0] + arguments[1];
// }

// // Option I
// () => {
//   return args[0] + args[1];
// }

// // Option II +
// (...args) => {
//   return args[0] + args[1]
// }

// // Option III ---
// () => {
// return arguments[0] + arguments[1];
// }

// // Option IV ---
// (...args) => {
//   return ...args[0] + ...args[1]
// }



// === 30. Какие методы передачи данных используются при запросах?
  // REST API ---
  // Метод может быть любой +
  // GET и POST ---
  // GET, POST, PUT, DELETE ---



// === 31. Какое значение переменной found после выполнения кода
// let found = document.getElementsByClassName('#MyID')
// console.log(found);

  // Выдаст undefined, т.к. ищем по классу, а передаем значение идентификатора ---
  // Исполнение кода выдаст ошибку, т.к. ищем по классу, а передаем значение идентификатора
  // Массив найденных элементов DOM ++
  // Выдаст только один элемент, соответствующий переданному идентификатору



// === 32. Какой из перечисленных методов вернет новый массив?
  // forEach
  // filter +++
  // map +++
  // reduce



// === 33. Что делает метод document.onload?
  // Позволяет выполнять действия, пока документ загружается
  // Показывает процесс загрузки страницы
  // Выполняет действия после полной загрузки документа +++
  // Загружает переданный документ



// === 34. Как удалить свойство property у объекта object?
  // object.remove('property') ---
  // delete object.property +



// === 34. Какой формат передачи данных предусмотрен между клиентом и сервером?
  // Фомат может быть любой +++



// === 35. Какое сравнение двух дат правильное?
  // date1 < date2
  // date1.equal(date2) [---] 
  // Сделать полное сравнение по составляющим дат (getFullYear(), getMounth(), getDate() и т.д.) [---] {+++}
  // date1.getTime() < date2. getTime {+++}



// === 36. Что выведет в консоли следующий код:
// fetch('www.google.com')
// .then(response => {console.log(respose.status)})

  // Выйдет ошибка выполнения, так как не указан метод запроса
  // 404, т.к. путь не найден +++
  // 403, т.к. не указан метод запроса
  // 200, т.к. запрос пройден ---



// === 37. Как добавить класс, чтобы прежние классы остались?
  // classList.add("className") +++



// === 38. 
// const a = /abc/;

// typeof a + 1 = ?
  // "function"
  // "string" ---
  // "object1" --- +++
  // "object" ++

// console.log(typeof a + 1); // object1




// === 39. Как добавить атрибут my-attr найденному элементу?
  // setAttribute('my-attr', value) +++
  // attrtbutes.my-attr = value
  // attributes.myAttr = value
  // attributes.add('my-attr', value) ---



// === 40. Как вызвать метод класса-родителя для элемента класса-наследника, если метод не переопределен?
    // childClassElement.ParentClass.parentMethod(arg1,arg2...) [---] ((---))
    // childClassElement.parentMethod(arg1,arg2...)
    // ParentClass(childClassElement).paretnMethod(arg1,arg2...) ((---))
    // ParentClass.prototype.parentMethod.call(childClassElement,arg1,arg2…) [---]



// === 41. Метод addEventListener('click', ()=>alert('clicked')) можно опеределить для:
  // Любого элемента +++
  // формы 
  // Кнопки 
  // Кнопки, формы, div и span



// === 42. Как получить новый массив, удалив из старого массива (array) элемент с индексом 5?
  // ...array.slice(0,5), ...array.slice(6)] +++



// === 43. Писать встроенный в html javascript можно:
  // В любом месте html +++



// === 44. Выражение {...object1,...object2}
  // Возвращает новый объект, склеенный из двух переданных, при этом повторяющиеся свойства принимают значения из последнего объекта. +++



// === 45. Что выведется в консоль?
// for (let i = 0; i <= 10; i++) {}
// console.log(i); // ReferenceError: i is not defined +++



// === 46. Что выведется в консоль?
// for (var i = 0; i <= 10; i++) {}
// console.log(i); // 11



// === 47. Как отсортировать массив объектов?
  // Вызвается метод sort, в который передается функция сортировки... +
  // Сортировка массива объектов не предусмотрена ---
  // Вызвается метод sort, в который передается имя свойства для сортировки
  // Для каждого объекта 



// === 48. 
// const a = [1,2,3,4,5];
// Что вернет метод a.filter((i,el) => el !== 4)?
// Измененный переданный массив [1,2,3,5] ---
// Новый массив [1,2,3,5] ---
// console.log(a.filter((i,el) => el !== 4)); // (4) [1, 2, 3, 4] +++



// === 49. Unit-тестирование нужно для:
  // Поиска ошибок логики программирования ---
  // Проверки качества кода
  // Автоматической проверки работоспособности методов при изменении кода +
  // Отладки методов при написании




// === 50. Что делает следующий код:
// new Date(1543990506864). getTime

// Преобразовывает значение в дату и возвращает время в формате, указанном в настройках системы ---
// ... часы минуты секунды 



// === 51. 
// const a = /abc/;
// typeof a = ?

  // object ++
  // "string" ---
  // console.log(typeof a);



// === 52. Какой тип значения вернет следующая функция:
// () => () => 2
// boolean ---
// string
// function +++
// number 

// let x = () => () => 2
// console.log(typeof(x));



// === 53. Есть массив

// const array = [1,2,3,4,5,6,7,8,9,0]
// array.forEach((el,ind) => {el += 1})
// Что произойдет с этим массивом в результате выполнения следующего кода?

// Массив останется в исходном состоянии +++ ---
  // Элементы исходного массива увеличатся на единицу ---
  // Будет выброшено исколючение, так как нельзя изменять константу +

  // console.log(array.forEach((el,ind) => {el += 1})); // undefined



// === 54. Чему равно выражение 
// +!null 
  // 1 +++



// === 55. Как получить весь текст в найденном элементе?
  // textContent +++



// === 56. Какое объявление переменной правильное?
  // let import = 1
  // let exports = 1 +++
  // let from = 1 +++
  // let required = 1 +++



// === 57. Как получить введенное значение в поле input из переменной event?
  // event.target.value +++



// === 58. Метод array.map()...
  // Создает новый массив из элементов переданного, которые обработаны согласно переданной функции +++



// === 59. 
// const a = 5;
// const b = a => a
// Чему равен b?
  // a => a +++



// === 60. 
// const a = /abc/;
// const b = /def/;
// a + b ? 

  // /abc//def/ +++
  // console.log(a + b); // /abc//def/



// === 61. Что означает запись const {name, age, job} = person ?
  // Это деструктуризация, но предварительно надо обязательно проверить, что person — это объект ---



// === 62. REST API это -
  // Протокол передачи данных между клиентом и сервером ---
  // Соглашение: список правил и ограничений при передаче данных между клиентом и сервером
  // Описание методов передачи данных по протоколу http(s)
  // Методология разработки приложения



// === 63. 
// const a = /abc/;
// typeof (a + 1) = ?

  // "function" ---
  // "string" +++
// console.log(typeof (a + 1)); // string



// === 62. Если мы в запросе к серверу передаем параметры в виде JSON, в каком виде может вернуться ответ?
  // JSON ---
  // Любой формат +

  // GOOGLE: JSON может принимать форму любого типа данных, допустимого для включения в



// === 61. Какой из методов можно использовать подряд? (например,
// object.method().method())

  // getElementsByClassName() ---
  // значит getElementsByTagName() ---



// === 62. Как добавить стиль background-color для найденного элемента?
    // style['backgroundColor'] = value ---



// === 61. Выражение […array1,…array2]
    // Возвращает новый массив элементов, которые есть в обоих переданных массивах ---



// === 62. В тест-фреймворке Jasmine...
    // В методе it можно использовать describe ---
    // В методе describe можно использовать it ---
    // В методе describe можно использовать как describe так и it
    // В методе it можно использовать как describe так и it +



// === 61. Что будет выведено в консоль?
  // '5 4 3 2 1' ---



// === 62. Есть 2 переменные:
// const array = [1,2,3,4,5]
// const object = {name: "Ivan", age: 23}
// Какой результат будет у выражения […array,object]?

    // Uncaught TypeError: object is not iterable



// === 61. Что делает следующий код:
  // Преобразовывает значение в дату и возвращает время в формате часы:минуты:секунды



// === 62. Какое утверждение верное?
    // Метод map возвращает полностью новый массив ---


// === 61. Как задать 1 января 2019 года?
    // new Date(2019,1,1,0,0,0) ---



// === 62. Rest API это - 
    // Соглашение ... +++



// === 61. Как удалить определенный класс у найденного элемента?
  // classList.remove('className) +++



// === 62. Что означает запись фукнции?
// const foo = ({a, b, c}) => {...}?
    // функция принимает на вход объект, в котором ожидаются поля a, b, с и создаются переменные a, b, с















// console.log(undefined === undefined);


// let t = setInterval(() => {
//   setTimeout(() =>{
//     clearInterval(t);
//   }, 3000)
//   console.log("привет"); // 4 +++
// },1000)




// // Задан массив
// const a = [1,2,3,4,5,6,7,8]; 
// [...a.slice(0,5),6,...a.slice(5)]
// console.log([...a.slice(0,5),6,...a.slice(5)]); //(9) [1, 2, 3, 4, 5, 6, 6, 7, 8] +++


// console.log(undefined == null);


// -------------- Example 1.1 --------------
['JavaScript', 'is', 'awesome'].forEach((item, index, array) => {
  // console.log(item, index, array);
})


// -------------- Example 1.2 --------------
const someArr =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
 someArr.forEach(function(num, idx, arr) {
  // console.log(num * 2);
});



