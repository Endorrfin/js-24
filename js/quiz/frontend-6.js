// 'use strict';

/* 
* Frontend #6 Асинхронный JavaScript
 */

/**
|--------------------------------------------------
  === <<<---  Quiz #1 --->>>  ===
Для запуска callback через какое-то время, один раз используется ф-я

setTimeout(callback, delay) +++
|--------------------------------------------------
*/


/**
|--------------------------------------------------
  === <<<---  Quiz #2  --->>>  ===
Для запуска callback через какое-то время, несколько раз используется ф-я

setInterval(callback, delay) +++
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #3 --->>>  ===  
Как отменить, или остановить setTimout и setInterval?

const interval = setInterval(() => console.log('interval'), 2000);
const timeout = setTimeout(() => console.log('timeout'), 2000);

// a
stopInterval();
stopTimeout();

// b +++
clearTimeout(timeout);
clearInterval(interval);

// c
interval.stop();
timeout.stop();

// d
deleteTimeout(timeout);
deleteInterval(interval);
|--------------------------------------------------
*/

// const interval = setInterval(() => console.log('interval'), 2000);
// const timeout = setTimeout(() => console.log('timeout'), 2000);

// clearTimeout(timeout);
// clearInterval(interval);


/**
|--------------------------------------------------
  === <<<---  Quiz #4 --->>>  ===
Что такое Promise?
Объект, что помогает совершить асинхронную операцию
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #5 --->>>  ===
Выберите не существующее состояние промиса:
Ожидание другого обещания
|--------------------------------------------------
*/


/**
|--------------------------------------------------
  === <<<---  Quiz #6 --->>>  ===
Выберите верный синтаксис для создания промиса:
new Promise(fn)
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #7 --->>>  ===
Выберите не существующий метод объекта Promise
all
then
catch
after +++
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #8 --->>>  ===
Есть ли метод Promise.resolve(). Если да, то что он возвращает?

Возвращает объект Promise со статусом resolved и значением.
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #9 --->>>  ===
Зачем нужен метод catch? 

Чтобы отловить ошибку, в любом месте цепочки промисов.
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #10 --->>>  ===
Что возвращает метод then? 

Promise object
|--------------------------------------------------
*/



/**
|--------------------------------------------------
  === <<<---  Quiz #11 --->>>  ===
Какой метод создания промися не правельный и упадет с ошибкой?
|--------------------------------------------------
*/

// // a 
// Promise.resolve(123)
// .then(() => {})
// .then(() => {});

// // b +++ error
// Promise(123)
// .then(() => {})
// .then(() => {});

// // c
// ( new Promise(resolve => (123)) )
// .then(() => {})
// .then(() => {});

// // d
// fetch('http://some.url/')
// .then(() =>{}) 


/**
|--------------------------------------------------
  === <<<---  Quiz #12 --->>>  ===
Какой console.log сработает, когда придет ошибка с сервера?

Оба
Try catch error
Request error +++
|--------------------------------------------------
*/

// try {
//   fetch('http://some.url/')
//   .then(
//     data => {},
//     error => console.log('Request error')
//   )

// } catch (err) {
//   console.log('Try catch error');
// }

/* 
Try catch - синхронный, а промис асинхронный, поэтому ошибки в промисе можно словить только с помощью catch block, но если мы используем async await то тогда можно словить и это единственный вариант.
*/


/**
|--------------------------------------------------
  === <<<---  Quiz #13 --->>>  ===
What will show console.log?
123,  245, undefined
|--------------------------------------------------
*/

// Promise.resolve(123)
// .then(data =>{
//   console.log(data);
//   return 245;
// })
// .then(data =>{
//   console.log(data);
// })
// .then(data =>{
//   console.log(data);
// })

/**
|--------------------------------------------------
  === <<<---  Quiz #14 --->>>  ===
What will show console.log?
["123", "here", "some"]
|--------------------------------------------------
*/

// const prom1 = Promise.resolve('123');
// const prom2 = Promise.resolve('here');
// const prom3 = Promise.resolve('some');
// Promise.all([prom1, prom2, prom3]).then(data => console.log(data));

// результатом будет массив, потому-что это promise.all

/**
|--------------------------------------------------
  === <<<---  Quiz #15 --->>>  ===
What will show console.log?
error
|--------------------------------------------------
*/

// const prom1 = Promise.resolve('123');
// const prom2 = Promise.resolve('error');
// const prom3 = Promise.resolve('some');
// Promise.all([prom1, prom2, prom3])
// .then(data => console.log(data))
// .catch(error => console.log(error));

/* 
Если в Promise.all хоть где-то ошибка, то возвращается ошибка и все успешные рузультаты тоже не придут.
*/




// === EXAMPLES === 

// === <<<--- What will show console.log?  --->>>  ===

